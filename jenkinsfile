
pipeline{
  agent any
 environment {
        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"
    }
  stages {
        stage('Install Frontend Dependencies') {
            steps{
                script {
                    dir('frontend/projectmanagement') {
                        sh('npm install')
                    }
                }
            }
        }
        stage('Install Backend Dependencies') {
            steps{
                script {
                    dir('backend') {
                        sh('npm install')
                    }
                }
            }
        }

 

    stage('SonarQube Analysis') {
      steps{
      script {  
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                    sh "${scannerHome}/bin/sonar-scanner"
                        }
                } 
              }  
            }

 stage('Build Frontend') {
            steps {
                script {
                    dir('frontend/projectmanagement') {
                        sh('npm run build') // Make sure build script is available
                    }
                }
            }
        }
        stage('Build Backend') {
            steps {
                script {
                    dir('backend') {
                        sh('npm run build') // Adjust if needed for Node.js build
                    }
                }
            }
        }
    stage('Building images (node and mongo)') {
steps{
script {
sh('docker-compose build')
}
}
}
 stage('Deploy  to Nexus') {
     steps{  
         script {

             docker.withRegistry("http://"+registry, registryCredentials ) {
            sh('docker push $registry/nodemongoapp:6.0 ')
          }
        }
      }
    }
    stage('Run application ') {
     steps{  
         script {
           docker.withRegistry("http://"+registry, registryCredentials ) {

            sh('docker pull $registry/nodemongoapp:6.0 ')

            sh('docker-compose up -d ')
          }
        }
      }
    }
  } 

}

